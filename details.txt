table 1: course studentid grade   CSG
// add date. What part should it be? Attribute or key?
struct CSG {
    char Course[5]; //conjugate key
    int StudentId;  //conjugate key
    char Grade[2];
};
table 2: StudentId Name Address Phone  SNAP
struct SNAP {
    int StudentId;  //k
    char Name[5];
    char Address[13];
    char Phone[5];
};
// table 3:Course Prerequisite    CP
struct CP {
    char Course[5];             //conjugate key
    char Prerequisite[5];       //conjugate key
};
table 4:Course Day Hour    CDH
struct CDH {
    char Course[5];         //conjugate key
    char Day[5];            //conjugate key
    char Hour[5];           //conjugate key
};
table 5:Course Room    CR
struct CR {
    char Course[5];
    char Room[5];
};


void insert(HASHTABLE table, char *Course, int StudentId, char *Grade){
    CSGLIST item = createTuple(Course, Grade, StudentId);
    int hashIndex = hashCode(Course, StudentId);
    // go to bucket,, walk through bucket for if it contains the struct or not.
    while (table[hashIndex])
    {
        hashIndex += (hashIndex + 1) % SIZE;
    }
    table[hashIndex] = item;
}


// typedef struct CSG *CSGTUPLE;   // Struct defined type for an instance of a CSG tuple
// struct CSG {
//     // a type but with no associated storage
//     int StudentId;  //conjugate key
//     char *Course;    // = (char*) malloc (courseSize * sizeof(char)); //conjugate key
//     char *Grade;     //  = (char*) malloc (gradeSize * sizeof(char)); //conjugate key
//     CSGTUPLE next;
// };
// typedef CSGTUPLE **CSGTABLE;    // hashtable for table CSG

 HASHTABLE r = createHashtable();
    CSGTUPLE t = createCSGTuple("CSC 173", "A", 123);
    insert(t, r);
    printTable(r);
    printf("\n");
    CSGTUPLE t1 = createCSGTuple("CSC 173", "A", 123);
    delete(t1, r);
    printTable(r);

      // CSGTUPLE t = createCSG("CSC 173", "A", 123);
    // SNAPTUPLE s = createSNAP(345, "Adamma Chidi", "Onitsha", 585123123);
    // CPTUPLE p = createCP("CSC 173", "CSC 172");
    // CDHTUPLE h = createCDH("CSC 173", "Monday", "12:30pm");
    // CRTUPLE rt = createCR("MTHs 173", "Room 2");

    // insertCSG(t, r->csg);
    // insertSNAP(s, r->snap);
    // insertCP(p, r->cp);
    // insertCDH(h, r->cdh);
    // insertCR(rt, r->cr);

    // printf("\nYup %d", t->StudentId);
    // printf("\nYup %d", s->StudentId);
    // printf("\nYup %s", p->Prerequisite);printf("%s", "hen");
    // printf("\nYup %s", h->Hour);
    // printf("\nYup %s", rt->Room);
    // printf("\n");

    //     tuple->next = table[hashIndex];
// //     if(table[hashIndex]){    printf("second %d\t%s\n", hashIndex, tuple->next->Course);
// // }
//     table[hashIndex] = tuple;
//     n++;
    // printf("%d\t%s", hashIndex, table[hashIndex]->Grade);


    
struct attribute
{   // attributes of a tuple.
    char* name;
    char* value;
    bool key;
    int columns;
    struct attribute* next;
};
typedef struct attribute* element; // a list of attributes is a tuple. 
//tuple is a pointer to the first attribute in the list.
// hashtable is an array of tuples. (list-elements)

struct node{
    element e;
    struct* node;
}
typedef struct element** hashtable;


unsigned long hash(element e) {
    unsigned long hash = 0;
    element current = e;
    while(current->next != NULL){
        if(current->key == 1){
            const char *c = current->value;
            while (c != NULL && *c != '\0'){
                hash += (intptr_t)c;
                ++c;
            }
        }
    }
    hash = (hash * BASE)% SIZE;
    return hash;
}

void insertIntoList(element head, element new_element){
    if(head == NULL){
        head = new_element;
    }else{
        element current = head;
        while(current->next != NULL){
            current = current->next;
        }
        current->next = new_element;
    }
}

void insertIntoTable(element e, hashtable t){
    unsigned long hashIndex = hash(e);
    hashIndex = hashIndex % SIZE;
    if(t[hashIndex] == NULL){
        t[hashIndex] = malloc(sizeof(element));

        element head = NULL;
        insertCSGIntoListOfCSGs(head, e);
        t[hashIndex] = head;
    }else{
        element head = t[hashIndex];
        insertCSGIntoListOfCSGs(head, e);
        t[hashIndex] = head;
    }

}

// void print(hashtable t){
//     for (int i = 0; i < SIZE; i++)  {
//         element head = t[i];
//         if(head == NULL){
//         }else{
//             element current = head;
//             while(current != NULL){
//                 printElement(current);
//                 // printf("%s\t%s\t%s", t[i]->Course,t[i]->StudentId,t[i]->Grade);
//                 current = current->next;
//             }
//         }
//     }
// }